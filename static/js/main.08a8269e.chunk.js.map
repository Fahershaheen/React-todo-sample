{"version":3,"sources":["components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","console","log","className","key","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","easing","duration","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItem","filter","onSubmit","type","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAgCeA,MA3Bf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAExB,OADIC,QAAQC,IAAI,qBACT,yBAAKC,UAAU,OAAOC,IAAKJ,EAAKI,KACnC,2BACI,2BAAQC,GAAIL,EAAKI,IAChBE,MAAON,EAAKO,KACZC,SACI,SAACC,GACDb,EAAMc,UAAUD,EAAEE,OAAOL,MAAON,EAAKI,QAG9C,8BACI,kBAAC,IAAD,CAAiBD,UAAU,SAASS,KAAK,QACzCC,QAAS,kBAAIjB,EAAMkB,WAAWd,EAAKI,cAM3C,OACA,6BACI,kBAAC,IAAD,CAAUW,OAAO,cAAcC,SAAU,KAAMnB,K,eCtB3DoB,IAAQC,IAAIC,K,IAoFGC,E,YAlFb,WAAYxB,GAAO,IAAD,8BAChB,4CAAMA,KACDyB,MAAQ,CACXvB,MAAM,GACNwB,YAAY,CACVf,KAAK,GACLH,IAAI,KAGRH,QAAQC,IAAI,wBAEZ,EAAKqB,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKV,WAAW,EAAKA,WAAWU,KAAhB,gBAChB,EAAKd,UAAU,EAAKA,UAAUc,KAAf,gBAdC,E,yEAkBFf,GACViB,KAAKC,SAAS,CAEZL,YAAY,CACVf,KAAME,EAAEE,OAAOL,MACfF,IAAKwB,KAAKC,SAGd5B,QAAQC,IAAI,0B,8BAEVO,GACNA,EAAEqB,iBAEF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAkB,KAAfS,EAAQxB,KAAU,CACnBN,QAAQC,IAAI,qBACZ,IAAM8B,EAAS,GAAD,mBAAKN,KAAKL,MAAMvB,OAAhB,CAAsBiC,IAClCL,KAAKC,SAAS,CACZ7B,MAAMkC,EACNV,YAAY,CACVf,KAAK,GACLH,IAAI,S,iCAMDA,GACT,IAAM6B,EAAaP,KAAKL,MAAMvB,MAAMoC,QAAO,SAAAlC,GAAI,OAAEA,EAAKI,MAAMA,KAC5DH,QAAQC,IAAI,uBACZwB,KAAKC,SAAS,CACZ7B,MAAMmC,M,gCAGA1B,EAAKH,GAAK,IAAD,OACXN,EAAQ4B,KAAKL,MAAMvB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKI,MAAMA,IACZJ,EAAKO,KAAKA,GAEZ,EAAKoB,SAAS,CACZ7B,MAAMA,S,+BAKd,OACE,yBAAKK,UAAU,OACb,0BAAME,GAAG,YAAY8B,SAAUT,KAAKD,SACpC,2BAAQW,KAAK,OACLC,YAAY,aACZlC,UAAU,cACVG,MAAQoB,KAAKL,MAAMC,YAAYf,KAC/BC,SAAUkB,KAAKH,cAGvB,4BAAQpB,UAAU,cAAaiC,KAAK,UAApC,QAEA,kBAAC,EAAD,CAAWtC,MAAO4B,KAAKL,MAAMvB,MAAOY,UAAWgB,KAAKhB,UAAWI,WAAYY,KAAKZ,kB,GA7EpEwB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.08a8269e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css'\r\nimport {FontAwesomeIcon} from  '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items\r\n    const listItems = items.map(item=>{\r\n            console.log(\"i'm from listItem\")\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input  id={item.key}\r\n                 value={item.text}\r\n                 onChange={\r\n                     (e)=>{\r\n                     props.setUpdate(e.target.value, item.key)}\r\n                 }\r\n                 />\r\n            <span>\r\n                <FontAwesomeIcon className=\"faicon\" icon='trash'\r\n                onClick={()=>props.deleteItem(item.key)}/>\r\n            </span>\r\n            </p>\r\n        </div>\r\n\r\n    })\r\n        return (\r\n        <div>\r\n            <FlipMove easing=\"ease-in-out\" duration={200}>{listItems}</FlipMove>\r\n        </div>\r\n    )\r\n}\r\nexport default ListItems","import React, { Component } from 'react';\nimport './App.css';\nimport ListItems from'./components/ListItems'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    console.log(\"i'm from constructor\")\n\n    this.handleInput=this.handleInput.bind(this)\n    this.addItem=this.addItem.bind(this)\n    this.deleteItem=this.deleteItem.bind(this)\n    this.setUpdate=this.setUpdate.bind(this)\n\n        \n  }\n      handleInput(e){\n        this.setState({\n          \n          currentItem:{\n            text: e.target.value,\n            key: Date.now()\n          }\n        })\n        console.log(\"i'm from handleInput\")\n      }\n  addItem(e){\n    e.preventDefault();\n    \n    const newItem = this.state.currentItem\n    if(newItem.text!==\"\"){\n      console.log(\"i'm from add item\")\n      const newItems=[...this.state.items,newItem]\n        this.setState({\n          items:newItems,\n          currentItem:{\n            text:'',\n            key:''\n          } \n        })\n      }   \n    }\n\n    deleteItem(key){\n      const filteredItem=this.state.items.filter(item=>item.key!==key)\n      console.log(\"i'm from deleteItem\")\n      this.setState({\n        items:filteredItem\n      })\n    }\n    setUpdate(text,key){\n      const items = this.state.items;\n      items.map(item=>{\n        if(item.key===key){\n          item.text=text;\n        }\n        this.setState({\n          items:items\n        })\n      }  )\n    }\n    render() {      \n  return (\n    <div className=\"App\">\n      <form id=\"todo-form\" onSubmit={this.addItem}>\n      <input  type='text' \n              placeholder='Enter Task' \n              className='todo-i-name' \n              value= {this.state.currentItem.text} \n              onChange={this.handleInput} \n              ></input>\n            \n      <button className='todo-button'type='submit'>Add</button>\n      </form>\n      <ListItems items={this.state.items} setUpdate={this.setUpdate} deleteItem={this.deleteItem}/>\n    </div>\n  );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}